{"version":3,"sources":["Components/header.js","Components/todos.js","Components/submit.js","Components/widgets.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","numToDo","Todo","content","class","onClick","onDelete","id","ToDoList","todos","tasks","map","index","SubmitForm","state","term","handleSubmit","e","preventDefault","onFormSubmit","setState","onSubmit","this","type","placeholder","value","onChange","target","Component","widgets","time","Date","getHours","getMinutes","classname","width","height","src","href","App","task","handleDelete","newArr","splice","numToDos","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAwCeA,MAjBf,SAAgBC,GAOZ,OACI,qBAAKC,UAAY,cAAjB,SAEI,qBAAIA,UAAY,2BAAhB,kBAAkDD,EAAME,QAAxD,0BCFNC,G,MAAO,SAACH,GAGV,OACI,sBAAKC,UAAY,YAAjB,UACKD,EAAMI,QAGX,wBAAQC,MAAM,SAASC,QAAS,WAAMN,EAAMO,SAASP,EAAMQ,KAA3D,sBAQOC,EA5CE,SAACT,GAEd,IAAMU,EAAQV,EAAMW,MAAMC,KAAI,SAACF,EAAOG,GActC,OAAO,cAAC,EAAD,CAAMT,QAAWM,EAAqBF,GAAMK,EAAON,SAAUP,EAAMO,UAApCM,MAGtC,OACI,qBAAKZ,UAAY,eAAjB,SACKS,KCqBEI,E,4MApCXC,MAAQ,CAACC,KAAM,I,EAEfC,aAAe,SAACC,GACZA,EAAEC,iBAEqB,KAApB,EAAKJ,MAAMC,OAEd,EAAKhB,MAAMoB,aAAa,EAAKL,MAAMC,MACnC,EAAKK,SAAS,CAACL,KAAM,O,4CAQzB,WAAS,IAAD,OACJ,OACI,uBAAMM,SAAYC,KAAKN,aAAvB,UAEI,uBACAO,KAAO,OACPvB,UAAY,QACZwB,YAAc,aACdC,MAASH,KAAKR,MAAMC,KAEpBW,SAAY,SAACT,GAAD,OAAO,EAAKG,SAAS,CAACL,KAAME,EAAEU,OAAOF,WAEjD,wBAAQzB,UAAY,SAApB,2B,GA7BS4B,a,MC6BVC,MAjCf,WACI,IAAMC,EAAO,IAAIC,KAIjB,OAHaD,EAAKE,WACHF,EAAKG,aAgBf,cAZD,CAYC,OAAKC,UAAY,UAAjB,UACG,wBAAQC,MAAM,MAAMC,OAAO,MAAMC,IAAI,+BACrC,sBAAKrC,UAAY,QAAjB,UACI,mBAAGsC,KAAO,6BAAV,mBACA,mBAAGA,KAAO,6BAAV,8BC6DDC,E,4MAvEbzB,MAAQ,CACNJ,MAAO,CAAC,oBAAqB,cAAe,UAAW,QAAS,S,EAKlEM,aAAe,SAAAwB,GACb,EAAKpB,SAAS,CAACV,MAAM,GAAD,mBAAM,EAAKI,MAAMJ,OAAjB,CAAwB8B,O,EAQhDC,aAAe,SAAC7B,GACd,IAAM8B,EAAM,YAAO,EAAK5B,MAAMJ,OAC9BgC,EAAOC,OAAO/B,EAAO,GAGrB,EAAKQ,SAAS,CAACV,MAAOgC,K,4CAQtB,WACE,OAEF,aADI,CACJ,OAAK1C,UAAY,UAAjB,SACA,sBAAKA,UAAY,aAAjB,UAIE,cAAC,EAAD,CAAQ4C,SAAYtB,KAAKR,MAAMJ,MAAMmC,SAKrC,cAAC,EAAD,CAAMnC,MAASY,KAAKR,MAAMJ,MAE1BJ,SAAYgB,KAAKmB,eAKjB,cAAC,EAAD,CAAQtB,aAAgBG,KAAKN,eAI7B,cAAC,EAAD,a,GA5DcY,aCGHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.fe01290d.chunk.js","sourcesContent":["// import React from 'react'\n// import \"../Styles/styles.css\";\n\n// //when we pass js in reacg we write it ABOVE the return/render element//\n// //.JS is return in {} passing some js\n// //{{}} inline styling\n\n// function header() {\n//     return (\n//         <div>\n            \n//         </div>\n//     )\n// }\n\n// export default header\n\n\n\nimport React from 'react'\nimport Todos from 'react'\nimport '../Styles/header.css'\n\nfunction Header(props) {\n    // const name = \"Des\"\n    // //props brings live component\n    // const date = new Date();\n    // const hours = date.getHours();\n    // const minutes = date.getminutes();\n\n    return (\n        <div className = 'card-header'>\n            {/* //so we can call it later in css */}\n            <h1 className = 'card-header-title header' >Your {props.numToDo }Assignments Today</h1>\n            {/* <h2>Hello {name}. It is currently {hours} : {minutes}</h2>\n             */}\n        </div>\n    )\n}\n\nexport default Header;\n","import React from 'react'\nimport '../Styles/todos.css'\n\nconst ToDoList = (props) => {\n    //props is getting info from other pages\n    const todos = props.tasks.map((todos, index)=> {\n    //have acces to all the todos we will pass\n    //we will pass tasks as a prop= const todo\n\n    //where does tasks come from?\n    //from te app.js tasks\n\n    //what does .map do?\n    //maps through each task \n    //because tasks is an array, it is going to map through everything in array\n        //whenever we use ,.map we need a unique key to pass index\n        //index as a parameter to catch those keys\n        //.map withouth key will warn us in react app as an \"unkept content\"\n\n    return <Todo content = {todos} key = {index} id = {index} onDelete={props.onDelete}/>\n    //access to all todos to take tasks as prop\n})\n    return (\n        <div className = 'list-wrapper'>\n            {todos}\n            {/* //map function needs to include a unique key to use as a parameter\n            //include id and key */}\n        </div>\n    )\n}\n\nconst Todo = (props) => {\n    //displays content of the task string\n    //fat arrow, don't have to do return immediately after\n    return(\n        <div className = 'list-item'>\n            {props.content}\n        {/* //content is list above tha  */}\n        {/* //When you press enter, this will dispaly */}\n        <button class='delete' onClick={()=> {props.onDelete(props.id)}}> X </button>\n        {/* //targeting the button by its props id, delete when clicked\n        //anything from the array-from that .map\n        //fat arror => because it is a function */}\n        </div>\n    )\n}\n\nexport default ToDoList;\n","import React, {Component} from 'react'\n\n\n//passing state\n//everytime hit submit button, state of component is going to change\n//everytime use state\n//use class extend component\n\nclass SubmitForm extends Component{\n    state = {term: ''};\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n          // e prevent default prevents page tfrom automatically refreshing when submitted\n        if(this.state.term === '') return;\n      \n        this.props.onFormSubmit(this.state.term);\n        this.setState({term: ''});\n        //term means text that is going to put in input field\n        //adding on-changed handler will update this everytime text is added\n    }\n    //handlesubmit prevents default\n    //anytime we render something to page\n    //renders through react, not browser\n\n    render(){\n        return(\n            <form onSubmit = {this.handleSubmit} >\n                {/* //form holding out tasks */}\n                <input\n                type = 'text'\n                className = 'input'\n                placeholder = 'Enter Item'\n                value = {this.state.term}\n                //changes are rendered through react, not the browser\n                onChange = {(e) => this.setState({term: e.target.value})}\n                />\n                <button className = 'button'>Submit</button>\n            </form>\n        )\n    }\n}\n\n\n\nexport default SubmitForm;","import React from 'react'\nimport '../Styles/widgets.css'\n\n\nfunction widgets() {\n    const time = new Date();\n    const hours= time.getHours();\n    const minutes= time.getMinutes();\n\n    return (\n\n        // <div>\n        //     {/* <iframe src = \"http://localhost:3000\"></iframe> */}\n        //     <div className = \"time\">{hours} : {minutes} </div>\n        //     <div className = \"links\">\n        //         <a href = \"/\">Click Me</a>\n        //         <a href = \"/\">Test me</a>\n        //     </div>\n        //     <input type=\"Login\"></input>\n            \n        // </div>\n\n\n         <div classname = \"widgets\">\n            <iframe width=\"320\" height=\"440\" src=\"http://instagram.com/embed\" ></iframe>\n            <div className = \"links\">\n                <a href = \"https://www.instagram.com/\">Login</a>\n                <a href = \"https://www.instagram.com/\">Follow me</a>\n            </div>\n            \n            \n        </div>\n\n        \n    )\n}\n\nexport default widgets\n","import React, {Component} from 'react';\nimport \"./App.css\"\nimport Header from \"../src/Components/header\";\nimport Todo from \"../src/Components/todos\";\nimport Submit from \"../src/Components/submit\";\nimport Widgets from \"../src/Components/widgets\";\n\n<script src=\"http://widget.com/script.js\" type=\"text/javascript\"></script>\n\nclass App extends Component{\n\n\n  //we are going to be passing states through app.js\n//state is an object that holds info that will change  over time  \n  //built into react\n    //whenever the state component changes, the app will be rerendered to show changes\n    //HAVE TO USE WITH CLASS EXTEND COMPONENT\n  state = {\n    tasks: [\"Weekly Discussion\", \"Two replies\", \"Project\", \"Study\", \"Read\"]\n    //will map through this array so it will display on out page\n    //will change over time as we run through and add/take awy from it\n  };\n\n  handleSubmit = task => {\n    this.setState({tasks: [...this.state.tasks, task]});\n  }\n  //this function copies contents of the old task array \n  //adds new tasks\n\n\n\n//delete button, removing element from task array\nhandleDelete = (index) => {\n  const newArr = [...this.state.tasks];\n  newArr.splice(index, 1,);\n   //as we delete it is going through the task array//\n  //moving the next idem up by one when we delete\n  this.setState({tasks: newArr});\n  //everytime we delete, it splices the array, moves the next up,\n  //state of our component every time we lose a number\n}\n//move up anything in tasks \n\n\n//functions must be above render\n  render(){\n    return(\n      //class app components require a render and return\n  <div className = 'wrapper'>\n  <div className = 'card-frame'>\n\n    \n\n    <Header numToDos = {this.state.tasks.length}/>\n    {/* //goign to give us a list of our tasks */}\n  {/* //\"this\" refers to numToDos, same line */} \n\n\n    <Todo tasks = {this.state.tasks} \n   //call the ondelete button\n    onDelete = {this.handleDelete} />\n  {/* //handleDelete is one of our functions\n  //will remosve a task -removes item from the state */}\n\n\n    <Submit onFormSubmit = {this.handleSubmit} />\n    {/* //submit box */}\n\n\n    <Widgets />\n\n  </div>\n</div>\n    )   \n  };\n\n}\n\n\n\n\n//ctrl space\n//press enter after typing\n\n\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}